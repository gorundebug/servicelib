digraph {
"api.DataConnector" -> { "api.string" "api.DataConnectorImplementation" "api.int" "api.ProgrammingLanguage" "api.DataConnectorType" };
"api.Endpoint" -> { "api.int" "api.DataFormat" "api.string" "api.bool" };
"api.Link" -> { "api.CallSemantics" "api.CommunicationProtocol" "api.bool" "api.string" "api.int" };
"api.Service" -> { "api.LogLevel" "api.ProgrammingLanguage" "api.CallSemantics" };
"api.Stream" -> { "api.bool" "api.TransformationType" "api.int" "api.JoinStorageType" "api.JoinType" "api.string" };
"api.StreamApp" -> { "api.Endpoint" "api.Link" "api.Pool" "api.Service" "api.ProjectSettings" "api.Stream" "api.Type" "api.DataConnector" };
"api.Type" -> { "api.DataType" "api.TypeDefinitionFormat" "api.string" "api.bool" };
"api.ServerInterfaceWrapper" -> { "api.ServerInterface" "api.MiddlewareFunc" };
"api.UnescapedCookieParamError" -> { "api.error" };
"api.UnmarshalingParamError" -> { "api.error" };
"api.RequiredHeaderError" -> { "api.error" };
"api.InvalidParamFormatError" -> { "api.error" };
"api.GorillaServerOptions" -> { "mux.Router" "api.MiddlewareFunc" };
"localsink.CustomDataSink" -> { "runtime.OutputDataSink" };
"localsink.CustomEndpoint" -> { "runtime.DataSinkEndpoint" };
"localsink.TypedCustomEndpointConsumer[T any]" -> { "runtime.DataSinkEndpointConsumerT" "localsink.DataConsumerT" };
"http.NetHTTPDataSource" -> { "http.ServeMux" "http.struct" "runtime.InputDataSource" "http.Server" };
"http.NetHTTPEndpoint" -> { "runtime.DataSourceEndpoint" };
"http.netHTTPEndpointRequestData" -> { "http.ResponseWriter" "http.Request" "http.byte" "url.Values" };
"http.NetHTTPEndpointTypedConsumer[T any]" -> { "runtime.DataSourceEndpointConsumerT" };
"http.NetHTTPEndpointJsonConsumer[T any]" -> { "http.NetHTTPEndpointTypedConsumerT" "reflect.Type" "http.string" };
"http.NetHTTPEndpointGorillaSchemaConsumer[T any]" -> { "http.NetHTTPEndpointTypedConsumerT" "reflect.Type" "schema.Decoder" };
"localsource.CustomDataSource" -> { "runtime.InputDataSource" "sync.WaitGroup" };
"localsource.CustomEndpoint" -> { "runtime.DataSourceEndpoint" "time.Duration" };
"localsource.TypedCustomEndpointConsumer[T any]" -> { "localsource.DataProducerT" "runtime.DataSourceEndpointConsumerT" };
"runtime.AppSinkStream[T any]" -> { "runtime.ServiceStreamT" "runtime.ConsumerFuncT" "runtime.TypedStreamT" };
"runtime.collector[T any]" -> { "runtime.CallerT" };
"runtime.parallelsCollector[T any]" -> { "runtime.CallerT" };
"config.StreamConfig" -> { "api.Stream" };
"config.ServiceConfig" -> { "api.Service" };
"config.LinkConfig" -> { "api.Link" };
"config.DataConnectorConfig" -> { "api.DataConnector" };
"config.EndpointConfig" -> { "api.Endpoint" };
"config.ProjectSettings" -> { "api.ProjectSettings" };
"config.RuntimeConfig" -> { "config.LinkId" "config.LinkConfig" "config.DataConnectorConfig" "config.EndpointConfig" "config.PoolConfig" "config.StreamConfig" "config.ServiceConfig" };
"config.ServiceAppConfig" -> { "config.EndpointConfig" "config.PoolConfig" "config.ProjectSettings" "config.RuntimeConfig" "config.StreamConfig" "config.ServiceConfig" "config.LinkConfig" "config.DataConnectorConfig" };
"runtime.OutputDataSink" -> { "runtime.ServiceExecutionEnvironment" "runtime.SinkEndpoint" };
"runtime.DataSinkEndpoint" -> { "runtime.DataSink" "runtime.OutputEndpointConsumer" "runtime.ServiceExecutionEnvironment" };
"runtime.DataSinkEndpointConsumer[T any]" -> { "runtime.TypedSinkStreamT" "runtime.TypedEndpointWriterT" "runtime.SinkEndpoint" };
"runtime.InputDataSource" -> { "runtime.InputEndpoint" "runtime.ServiceExecutionEnvironment" };
"runtime.DataSourceEndpoint" -> { "runtime.InputEndpointConsumer" "runtime.ServiceExecutionEnvironment" "runtime.DataSource" };
"runtime.DataSourceEndpointConsumer[T any]" -> { "runtime.TypedInputStreamT" "runtime.InputEndpoint" "runtime.TypedEndpointReaderT" };
"datastruct.KeyValue[K comparable, V any]" -> { "datastruct.K" "datastruct.V" };
"runtime.DelayFunctionContext[T any]" -> { "runtime.StreamFunctionT" "runtime.TypedStreamT" "runtime.DelayFunctionT" };
"runtime.DelayStream[T any]" -> { "runtime.TypedStreamT" "runtime.DelayFunctionContextT" "runtime.ConsumedStreamT" };
"metrics.Opts" -> { "metrics.Labels" };
"metrics.CounterOpts" -> { "metrics.Opts" };
"metrics.SummaryOpts" -> { "metrics.Opts" "time.Duration" };
"metrics.GaugeOpts" -> { "metrics.Opts" };
"metrics.HistogramOpts" -> { "metrics.Opts" "metrics.float64" "time.Duration" };
"runtime.FilterFunctionContext[T any]" -> { "runtime.TypedStreamT" "runtime.FilterFunctionT" "runtime.StreamFunctionT" };
"runtime.FilterStream[T any]" -> { "runtime.ConsumedStreamT" "runtime.TypedStreamT" "runtime.FilterFunctionContextT" };
"runtime.FlatMapFunctionContext[T, R any]" -> { "runtime.StreamFunctionR" "runtime.TypedStreamR" "runtime.R" };
"runtime.FlatMapStream[T, R any]" -> { "runtime.ConsumedStreamR" "runtime.TypedStreamT" "runtime.R" };
"runtime.FlatMapIterableStream[T, R any]" -> { "runtime.ConsumedStreamR" "runtime.TypedStreamT" };
"runtime.ForEachFunctionContext[T any]" -> { "runtime.StreamFunctionT" "runtime.TypedStreamT" "runtime.ForEachFunctionT" };
"runtime.ForEachStream[T any]" -> { "runtime.ConsumedStreamT" "runtime.TypedStreamT" "runtime.ForEachFunctionContextT" };
"runtime.InputStream[T any]" -> { "runtime.ConsumedStreamT" };
"runtime.JoinFunctionContext[K comparable, T1, T2, R any]" -> { "runtime.StreamFunctionR" "runtime.TypedStreamR" "runtime.R" };
"runtime.JoinLink[K comparable, T1, T2, R any]" -> { "runtime.R" "runtime.T2" };
"runtime.JoinStream[K comparable, T1, T2, R any]" -> { "runtime.ConsumedStreamR" "runtime.R" "runtime.T1" "store.JoinStorageK" "api.JoinType" };
"runtime.joinStorageConfig" -> { "runtime.Stream" };
"runtime.KeyByFunctionContext[T any, K comparable, V any]" -> { "runtime.V" };
"runtime.KeyByStream[T any, K comparable, V any]" -> { "runtime.V" "runtime.TypedStreamT" };
"runtime.LinkStream[T any]" -> { "runtime.ConsumedStreamT" "runtime.TypedConsumedStreamT" };
"logrus.LogEngine" -> { "environment.ServiceEnvironment" };
"runtime.MapFunctionContext[T, R any]" -> { "runtime.StreamFunctionR" "runtime.TypedStreamR" "runtime.R" };
"runtime.MapStream[T, R any]" -> { "runtime.ConsumedStreamR" "runtime.TypedStreamT" "runtime.R" };
"runtime.MergeStream[T any]" -> { "runtime.ConsumedStreamT" "runtime.MergeLinkT" };
"runtime.MergeLink[T any]" -> { "runtime.MergeStreamT" "runtime.TypedStreamT" };
"runtime.MultiJoinFunctionContext[K comparable, T, R any]" -> { "runtime.StreamFunctionR" "runtime.TypedStreamR" "runtime.R" };
"runtime.MultiJoinLinkStream[K comparable, T1, T2, R any]" -> { "runtime.R" "serde.SerdeT2" "runtime.T2" };
"runtime.MultiJoinStream[K comparable, T, R any]" -> { "runtime.R" "runtime.multiJoinLinkStream" "runtime.T" "store.JoinStorageK" "runtime.ConsumedStreamR" };
"runtime.ParallelsFunctionContext[T, R any]" -> { "runtime.StreamFunctionR" "runtime.TypedStreamR" "runtime.R" };
"runtime.ParallelsStream[T, R any]" -> { "runtime.ConsumedStreamR" "runtime.TypedStreamT" "runtime.R" };
"pool.DelayTask" -> { "time.Time" "pool.DelayTask" };
"pool.DelayPoolImpl" -> { "metrics.Gauge" "pool.DelayTask" "pool.DelayTaskPriorityQueue" "sync.WaitGroup" "sync.Mutex" "pool.struct" "sync.Cond" "time.Timer" "environment.ServiceEnvironment" };
"pool.PriorityTaskPoolImpl" -> { "sync.Cond" "environment.ServiceEnvironment" "sync.Mutex" "pool.TaskPriorityQueue" "metrics.Gauge" "sync.WaitGroup" };
"pool.Task" -> { "pool.Task" };
"pool.TaskPoolImpl" -> { "pool.Task" "sync.Mutex" "metrics.Gauge" "sync.WaitGroup" "sync.Cond" "environment.ServiceEnvironment" };
"serviceLoader[Environment ServiceExecutionEnvironment, Cfg config.Config]" -> { "fsnotify.Watcher" "sync.WaitGroup" "runtime.Environment" };
"runtime.consumeStatistics" -> { "atomic.Int64" };
"runtime.caller[T any]" -> { "runtime.consumeStatistics" "runtime.ServiceExecutionRuntime" "runtime.TypedStreamT" "runtime.TypedStreamConsumerT" };
"runtime.directCaller[T any]" -> { "runtime.callerT" };
"runtime.taskPoolCaller[T any]" -> { "runtime.callerT" "pool.TaskPool" };
"runtime.priorityTaskPoolCaller[T any]" -> { "runtime.callerT" "pool.PriorityTaskPool" };
"runtime.ServiceStream[T any]" -> { "runtime.ServiceExecutionEnvironment" };
"runtime.ConsumedStream[T any]" -> { "runtime.ServiceStreamT" "runtime.CallerT" "serde.StreamSerdeT" "runtime.TypedStreamConsumerT" };
"runtime.StreamFunction[T any]" -> { "runtime.ServiceStreamT" };
"serde.streamSerde[T any]" -> { "serde.SerdeT" };
"serde.streamKeyValueSerde[K comparable, V any]" -> { "serde.SerdeK" "serde.SerdeV" };
"serde.arraySerde" -> { "reflect.Type" "serde.Serializer" };
"serde.ArraySerde[T any]" -> { "serde.arraySerde" };
"serde.mapSerde" -> { "reflect.Type" "serde.Serializer" };
"serde.MapSerde[T any]" -> { "serde.mapSerde" };
"runtime.MockServiceConfig" -> { "config.ServiceAppConfig" };
"runtime.MockService" -> { "runtime.MockServiceConfig" "runtime.ServiceApp" };
"runtime.ServiceApp" -> { "atomic.Pointerconfig.ServiceAppConfig" "runtime.ServiceExecutionEnvironment" "config.LinkId" "http.ServeMux" "metrics.Metrics" "store.Storage" "pool.TaskPool" "log.LogsEngine" "runtime.DataSource" "runtime.DataSink" "reflect.Type" "log.Logger" "runtime.ConsumeStatistics" "pool.PriorityTaskPool" "runtime.Stream" "serde.StreamSerializer" "metrics.MetricsEngine" "runtime.ServiceLoader" "http.Server" "runtime.struct" "pool.DelayPool" };
"runtime.SinkStream[T any]" -> { "runtime.ServiceStreamT" "runtime.TypedStreamT" "runtime.ConsumerT" };
"runtime.SplitLink[T any]" -> { "runtime.SplitStreamT" "runtime.CallerT" "runtime.TypedStreamConsumerT" };
"runtime.SplitStream[T any]" -> { "runtime.ConsumedStreamT" "runtime.SplitLinkT" "runtime.TypedStreamT" };
"runtime.InputSplitStream[T any]" -> { "runtime.SplitStreamT" };
"runtime.InputKVSplitStream[T any]" -> { "runtime.SplitStreamT" "serde.StreamKeyValueSerdeT" };
"store.Item" -> { "store.interface" "sync.Mutex" "time.Time" };
"store.HashMapJoinStorage[K comparable]" -> { "store.K" "store.Item" "sync.RWMutex" "time.Timer" "store.JoinStorageConfig" "metrics.Gauge" "environment.ServiceEnvironment" };
"runtime.InStubStream[T any]" -> { "runtime.ConsumedStreamT" };
"runtime.InStubKVStream[T any]" -> { "runtime.ConsumedStreamT" "serde.StreamKeyValueSerdeT" };
"runtime.OutStubStream[T any]" -> { "runtime.ConsumerFuncT" "runtime.TypedStreamT" "runtime.ConsumedStreamT" };
"runtime.OutStubBinaryStream[T any]" -> { "runtime.ConsumedStreamT" "runtime.TypedStreamT" "runtime.BinaryConsumerFunc" };
"runtime.OutStubBinaryKVStream[T any]" -> { "runtime.ConsumedStreamT" "runtime.TypedStreamT" "serde.StreamKeyValueSerdeT" "runtime.BinaryKVConsumerFunc" };
"prometheus.CounterVec" -> { "prometheus.CounterVec" };
"prometheus.SummaryVec" -> { "prometheus.SummaryVec" };
"prometheus.GaugeVec" -> { "prometheus.GaugeVec" };
"prometheus.HistogramVec" -> { "prometheus.HistogramVec" };
"prometheus.MetricsEngine" -> { "environment.ServiceEnvironment" "prometheus.Metrics" };
"nethttp.MockServiceConfig" -> { "config.ServiceAppConfig" };
"nethttp.MockService" -> { "nethttp.MockServiceConfig" "nethttp.struct" "runtime.TypedStreamConsumerRequestData" "runtime.TypedInputStreamRequestData" "runtime.ConsumerRequestData" "nethttp.RequestData" "runtime.ServiceApp" };
}